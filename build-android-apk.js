#!/usr/bin/env node

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ IMPERIA PROMO - –ü–æ–ª–Ω–∞—è Android APK —Å–±–æ—Ä–∫–∞');
console.log('==============================================\n');

class AndroidBuilder {
  constructor() {
    this.projectRoot = process.cwd();
    this.androidPath = path.join(this.projectRoot, 'android');
    this.buildStartTime = Date.now();
  }

  log(message, type = 'info') {
    const timestamp = new Date().toLocaleTimeString();
    const prefix = {
      info: 'üìã',
      success: '‚úÖ',
      error: '‚ùå',
      warning: '‚ö†Ô∏è',
      progress: 'üîÑ'
    }[type] || 'üìã';
    
    console.log(`[${timestamp}] ${prefix} ${message}`);
  }

  async exec(command, options = {}) {
    return new Promise((resolve, reject) => {
      const child = spawn('bash', ['-c', command], {
        stdio: ['inherit', 'pipe', 'pipe'],
        cwd: options.cwd || this.projectRoot,
        ...options
      });

      let stdout = '';
      let stderr = '';

      child.stdout?.on('data', (data) => {
        stdout += data.toString();
        if (options.verbose) process.stdout.write(data);
      });

      child.stderr?.on('data', (data) => {
        stderr += data.toString();
        if (options.verbose) process.stderr.write(data);
      });

      child.on('close', (code) => {
        if (code === 0) {
          resolve({ stdout, stderr, code });
        } else {
          reject(new Error(`Command failed with code ${code}: ${stderr || stdout}`));
        }
      });
    });
  }

  async checkPrerequisites() {
    this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π...', 'progress');
    
    const checks = [
      { name: 'Node.js', command: 'node --version' },
      { name: 'NPM', command: 'npm --version' },
      { name: 'Capacitor CLI', command: 'npx cap --version' }
    ];

    for (const check of checks) {
      try {
        const result = await this.exec(check.command);
        this.log(`${check.name}: ${result.stdout.trim()}`, 'success');
      } catch (error) {
        this.log(`${check.name}: –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'error');
        throw new Error(`${check.name} is required but not installed`);
      }
    }
  }

  async buildWebAssets() {
    this.log('–°–±–æ—Ä–∫–∞ –≤–µ–±-—Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è production...', 'progress');
    
    try {
      await this.exec('npm run build', { verbose: true });
      this.log('–í–µ–±-—Ä–µ—Å—É—Ä—Å—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ', 'success');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ dist —Å–æ–∑–¥–∞–Ω
      if (!fs.existsSync(path.join(this.projectRoot, 'dist'))) {
        throw new Error('–ü–∞–ø–∫–∞ dist –Ω–µ —Å–æ–∑–¥–∞–Ω–∞');
      }
      
      const distSize = this.getFolderSize(path.join(this.projectRoot, 'dist'));
      this.log(`–†–∞–∑–º–µ—Ä —Å–±–æ—Ä–∫–∏: ${(distSize / 1024 / 1024).toFixed(2)} MB`, 'info');
      
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –≤–µ–±-—Ä–µ—Å—É—Ä—Å–æ–≤: ${error.message}`, 'error');
      throw error;
    }
  }

  async initializeAndroid() {
    this.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Android –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã...', 'progress');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ Android –ø–∞–ø–∫–∞
      if (fs.existsSync(this.androidPath)) {
        this.log('Android –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'info');
      } else {
        await this.exec('npx cap add android', { verbose: true });
        this.log('Android –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞', 'success');
      }
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –≤–µ–±-—Ä–µ—Å—É—Ä—Å–∞–º–∏
      await this.exec('npx cap sync android', { verbose: true });
      this.log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Android –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
      
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Android: ${error.message}`, 'error');
      throw error;
    }
  }

  async optimizeAndroidConfig() {
    this.log('–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Android...', 'progress');
    
    try {
      // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π build.gradle
      const buildGradlePath = path.join(this.androidPath, 'app', 'build.gradle');
      
      if (fs.existsSync(buildGradlePath)) {
        let buildGradle = fs.readFileSync(buildGradlePath, 'utf8');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if (!buildGradle.includes('minifyEnabled')) {
          buildGradle = buildGradle.replace(
            'buildTypes {',
            `buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }`
          );
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        if (!buildGradle.includes('ndk {')) {
          buildGradle = buildGradle.replace(
            'defaultConfig {',
            `defaultConfig {
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a'
        }`
          );
        }
        
        fs.writeFileSync(buildGradlePath, buildGradle);
        this.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Android –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'success');
      }
      
      // –°–æ–∑–¥–∞–µ–º proguard-rules.pro –µ—Å–ª–∏ –Ω–µ—Ç
      const proguardPath = path.join(this.androidPath, 'app', 'proguard-rules.pro');
      if (!fs.existsSync(proguardPath)) {
        const proguardRules = `
# Keep Capacitor classes
-keep class com.getcapacitor.** { *; }
-keep class com.capacitorjs.** { *; }

# Keep WebView
-keep class android.webkit.** { *; }

# Keep video recording classes
-keep class android.media.** { *; }
-keep class android.hardware.camera2.** { *; }

# Optimization
-optimizationpasses 5
-dontusemixedcaseclassnames
-dontskipnonpubliclibraryclasses
-dontpreverify
-verbose
`;
        fs.writeFileSync(proguardPath, proguardRules);
        this.log('Proguard –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–∑–¥–∞–Ω—ã', 'success');
      }
      
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'warning');
    }
  }

  async buildReleaseAPK() {
    this.log('–°–±–æ—Ä–∫–∞ release APK...', 'progress');
    
    try {
      const gradlePath = path.join(this.androidPath, 'gradlew');
      
      // –î–µ–ª–∞–µ–º gradlew –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
      if (fs.existsSync(gradlePath)) {
        await this.exec(`chmod +x ${gradlePath}`);
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º release APK
      await this.exec('./gradlew assembleRelease', {
        cwd: this.androidPath,
        verbose: true
      });
      
      this.log('Release APK —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
      
      // –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π APK
      const apkPaths = [
        path.join(this.androidPath, 'app', 'build', 'outputs', 'apk', 'release', 'app-release.apk'),
        path.join(this.androidPath, 'app', 'build', 'outputs', 'apk', 'release', 'app-release-unsigned.apk')
      ];
      
      for (const apkPath of apkPaths) {
        if (fs.existsSync(apkPath)) {
          const apkSize = fs.statSync(apkPath).size;
          this.log(`APK –Ω–∞–π–¥–µ–Ω: ${apkPath}`, 'success');
          this.log(`–†–∞–∑–º–µ—Ä APK: ${(apkSize / 1024 / 1024).toFixed(2)} MB`, 'info');
          
          // –ö–æ–ø–∏—Ä—É–µ–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
          const targetPath = path.join(this.projectRoot, 'imperia-promo-release.apk');
          fs.copyFileSync(apkPath, targetPath);
          this.log(`APK —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤: ${targetPath}`, 'success');
          
          return targetPath;
        }
      }
      
      throw new Error('APK —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏');
      
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ APK: ${error.message}`, 'error');
      
      // –ü—Ä–æ–±—É–µ–º debug —Å–±–æ—Ä–∫—É –∫–∞–∫ fallback
      try {
        this.log('–ü—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å debug APK...', 'warning');
        await this.exec('./gradlew assembleDebug', {
          cwd: this.androidPath,
          verbose: true
        });
        
        const debugApkPath = path.join(this.androidPath, 'app', 'build', 'outputs', 'apk', 'debug', 'app-debug.apk');
        if (fs.existsSync(debugApkPath)) {
          const targetPath = path.join(this.projectRoot, 'imperia-promo-debug.apk');
          fs.copyFileSync(debugApkPath, targetPath);
          this.log(`Debug APK —Å–æ–∑–¥–∞–Ω: ${targetPath}`, 'success');
          return targetPath;
        }
      } catch (debugError) {
        this.log(`Debug —Å–±–æ—Ä–∫–∞ —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${debugError.message}`, 'error');
      }
      
      throw error;
    }
  }

  async generateAPKInfo(apkPath) {
    this.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ APK...', 'progress');
    
    const apkStats = fs.statSync(apkPath);
    const buildTime = Date.now() - this.buildStartTime;
    
    const apkInfo = {
      app: {
        name: 'IMPERIA PROMO',
        version: '1.0.0',
        packageId: 'com.imperiapromo.videoapp',
        buildDate: new Date().toISOString(),
        buildTime: `${(buildTime / 1000).toFixed(1)} —Å–µ–∫—É–Ω–¥`
      },
      apk: {
        path: path.basename(apkPath),
        size: `${(apkStats.size / 1024 / 1024).toFixed(2)} MB`,
        sizeBytes: apkStats.size,
        type: apkPath.includes('release') ? 'release' : 'debug',
        minAndroid: 'Android 7.0 (API 24)',
        targetAndroid: 'Android 14 (API 34)'
      },
      installation: {
        direct: true,
        playStore: false,
        requirements: [
          'Android 7.0+',
          '100MB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞',
          '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤'
        ]
      },
      features: [
        '–ù–∞—Ç–∏–≤–Ω–∞—è HD/4K –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å',
        '–§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤',
        '–û—Ñ–ª–∞–π–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ',
        'Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–∞–ª–µ—Ä–µ–µ–π',
        '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ'
      ]
    };
    
    fs.writeFileSync('apk-build-info.json', JSON.stringify(apkInfo, null, 2));
    this.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ APK —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ apk-build-info.json', 'success');
    
    return apkInfo;
  }

  async createDownloadPage(apkInfo) {
    this.log('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...', 'progress');
    
    const downloadPage = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üì± –°–∫–∞—á–∞—Ç—å IMPERIA PROMO APK</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }
        .container { background: white; padding: 30px; border-radius: 15px; box-shadow: 0 20px 60px rgba(0,0,0,0.3); }
        .header { text-align: center; margin-bottom: 30px; }
        .logo { font-size: 64px; margin-bottom: 10px; }
        .download-btn { display: block; width: 100%; padding: 20px; background: linear-gradient(135deg, #10B981, #059669); color: white; text-decoration: none; border-radius: 12px; text-align: center; font-size: 18px; font-weight: bold; margin: 20px 0; transition: transform 0.3s; }
        .download-btn:hover { transform: translateY(-3px); }
        .info-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin: 20px 0; }
        .info-item { background: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center; }
        .features { background: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .feature-item { margin: 8px 0; }
        .build-info { background: #f0f9ff; padding: 20px; border-radius: 8px; margin: 20px 0; font-size: 14px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">üì±</div>
            <h1>IMPERIA PROMO</h1>
            <p>–ì–æ—Ç–æ–≤–æ–µ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</p>
        </div>

        <a href="${apkInfo.apk.path}" class="download-btn" download>
            üì• –°–∫–∞—á–∞—Ç—å APK (${apkInfo.apk.size})
        </a>

        <div class="info-grid">
            <div class="info-item">
                <strong>–í–µ—Ä—Å–∏—è</strong><br>
                ${apkInfo.app.version}
            </div>
            <div class="info-item">
                <strong>–†–∞–∑–º–µ—Ä</strong><br>
                ${apkInfo.apk.size}
            </div>
            <div class="info-item">
                <strong>–¢–∏–ø</strong><br>
                ${apkInfo.apk.type}
            </div>
            <div class="info-item">
                <strong>Android</strong><br>
                ${apkInfo.apk.minAndroid}
            </div>
        </div>

        <div class="features">
            <h3>üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</h3>
            ${apkInfo.features.map(feature => `<div class="feature-item">‚úÖ ${feature}</div>`).join('')}
        </div>

        <div class="build-info">
            <h4>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä–∫–µ:</h4>
            <p><strong>–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏:</strong> ${new Date(apkInfo.app.buildDate).toLocaleString()}</p>
            <p><strong>–í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏:</strong> ${apkInfo.app.buildTime}</p>
            <p><strong>Package ID:</strong> ${apkInfo.app.packageId}</p>
            <p><strong>–¶–µ–ª–µ–≤–æ–π Android:</strong> ${apkInfo.apk.targetAndroid}</p>
        </div>

        <div style="text-align: center; margin-top: 30px; color: #666; font-size: 14px;">
            <p>–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Capacitor + Android SDK</p>
            <p>¬© IMPERIA PROMO ${new Date().getFullYear()}</p>
        </div>
    </div>

    <script>
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        document.querySelector('.download-btn').addEventListener('click', function() {
            console.log('APK download initiated:', '${apkInfo.apk.path}');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            setTimeout(() => {
                alert('üì± –ü–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\\n\\n1. –í–∫–ª—é—á–∏—Ç–µ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"\\n2. –û—Ç–∫—Ä–æ–π—Ç–µ APK —Ñ–∞–π–ª\\n3. –ù–∞–∂–º–∏—Ç–µ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"\\n4. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ');
            }, 1000);
        });
    </script>
</body>
</html>`;

    fs.writeFileSync('download-real-apk.html', downloadPage);
    this.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: download-real-apk.html', 'success');
  }

  getFolderSize(folderPath) {
    let size = 0;
    if (fs.existsSync(folderPath)) {
      const files = fs.readdirSync(folderPath);
      files.forEach(file => {
        const filePath = path.join(folderPath, file);
        const stats = fs.statSync(filePath);
        if (stats.isFile()) {
          size += stats.size;
        } else if (stats.isDirectory()) {
          size += this.getFolderSize(filePath);
        }
      });
    }
    return size;
  }

  async build() {
    try {
      this.log('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é —Å–±–æ—Ä–∫—É Android APK...', 'progress');
      
      // –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
      await this.checkPrerequisites();
      
      // –≠—Ç–∞–ø 2: –°–±–æ—Ä–∫–∞ –≤–µ–±-—Ä–µ—Å—É—Ä—Å–æ–≤
      await this.buildWebAssets();
      
      // –≠—Ç–∞–ø 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Android
      await this.initializeAndroid();
      
      // –≠—Ç–∞–ø 4: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      await this.optimizeAndroidConfig();
      
      // –≠—Ç–∞–ø 5: –°–±–æ—Ä–∫–∞ APK
      const apkPath = await this.buildReleaseAPK();
      
      // –≠—Ç–∞–ø 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const apkInfo = await this.generateAPKInfo(apkPath);
      
      // –≠—Ç–∞–ø 7: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      await this.createDownloadPage(apkInfo);
      
      const totalTime = ((Date.now() - this.buildStartTime) / 1000).toFixed(1);
      
      this.log('', 'success');
      this.log('üéâ APK –£–°–ü–ï–®–ù–û –°–û–ë–†–ê–ù!', 'success');
      this.log('', 'success');
      this.log(`üì± APK —Ñ–∞–π–ª: ${path.basename(apkPath)}`, 'info');
      this.log(`üìä –†–∞–∑–º–µ—Ä: ${apkInfo.apk.size}`, 'info');
      this.log(`‚è±Ô∏è –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: ${totalTime} —Å–µ–∫—É–Ω–¥`, 'info');
      this.log(`üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: download-real-apk.html`, 'info');
      this.log('', 'success');
      this.log('–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ APK –≤–∫–ª—é—á–∏—Ç–µ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Android', 'warning');
      
      return apkPath;
      
    } catch (error) {
      this.log(`–°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`, 'error');
      
      // –°–æ–∑–¥–∞–µ–º fallback –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      this.log('–°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ —Å–±–æ—Ä–∫–µ...', 'warning');
      
      const fallbackInfo = {
        status: 'build_failed',
        error: error.message,
        message: '–î–ª—è –ø–æ–ª–Ω–æ–π —Å–±–æ—Ä–∫–∏ APK —Ç—Ä–µ–±—É–µ—Ç—Å—è Android SDK –∏ Java JDK',
        alternative: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Å–±–æ—Ä–∫–µ, –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
        buildDate: new Date().toISOString(),
        instructions: [
          '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Android Studio —Å SDK',
          '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Java JDK 11+',
          '–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run build',
          '–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npx cap sync android',
          '–ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd android && ./gradlew assembleRelease'
        ]
      };
      
      fs.writeFileSync('build-status.json', JSON.stringify(fallbackInfo, null, 2));
      this.log('–°—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ build-status.json', 'info');
      
      throw error;
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏
const builder = new AndroidBuilder();
builder.build().catch(() => process.exit(1));