import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';
import { useNativeCamera } from '@/hooks/useNativeCamera';
import { useToast } from '@/hooks/use-toast';
import { Capacitor } from '@capacitor/core';
import { StatusBar, Style } from '@capacitor/status-bar';
import { SplashScreen } from '@capacitor/splash-screen';

interface NativeVideoRecorderProps {
  onVideoRecorded: (blob: Blob) => void;
  onError: (error: string) => void;
}

const NativeVideoRecorder: React.FC<NativeVideoRecorderProps> = ({ 
  onVideoRecorded, 
  onError 
}) => {
  const { isNative, recordVideo, isRecording, error } = useNativeCamera();
  const { toast } = useToast();
  const [isInitialized, setIsInitialized] = useState(false);

  useEffect(() => {
    const initializeNativeFeatures = async () => {
      if (Capacitor.isNativePlatform()) {
        try {
          // Hide splash screen
          await SplashScreen.hide();
          
          // Set status bar
          await StatusBar.setStyle({ style: Style.Dark });
          await StatusBar.setBackgroundColor({ color: '#3B82F6' });
          
          console.log('üöÄ Native platform initialized');
          setIsInitialized(true);
        } catch (err) {
          console.error('‚ùå Native initialization error:', err);
        }
      } else {
        setIsInitialized(true);
      }
    };

    initializeNativeFeatures();
  }, []);

  useEffect(() => {
    if (error) {
      onError(error);
      toast({
        title: '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏',
        description: error,
        variant: 'destructive'
      });
    }
  }, [error, onError, toast]);

  const handleRecordVideo = async () => {
    try {
      toast({
        title: 'üìπ –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ',
        description: '–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å —Å –∫–∞–º–µ—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...'
      });

      const videoBlob = await recordVideo();
      
      if (videoBlob) {
        onVideoRecorded(videoBlob);
        toast({
          title: '‚úÖ –í–∏–¥–µ–æ –∑–∞–ø–∏—Å–∞–Ω–æ!',
          description: `–†–∞–∑–º–µ—Ä: ${(videoBlob.size / (1024 * 1024)).toFixed(2)} MB`
        });
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ');
      }
    } catch (err: any) {
      const errorMessage = err.message || '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ';
      onError(errorMessage);
      toast({
        title: '‚ùå –û—à–∏–±–∫–∞',
        description: errorMessage,
        variant: 'destructive'
      });
    }
  };

  if (!isInitialized) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="text-center">
          <Icon name="Loader2" size={32} className="animate-spin mx-auto mb-2" />
          <p className="text-sm text-muted-foreground">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {isNative && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <div className="flex items-center gap-2">
            <Icon name="Smartphone" size={20} className="text-green-600" />
            <div>
              <h4 className="text-sm font-medium text-green-800">–ù–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h4>
              <p className="text-xs text-green-600">
                –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–º–µ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–∏
              </p>
            </div>
          </div>
        </div>
      )}

      <div className="text-center space-y-4">
        <div className="relative">
          <div className="w-64 h-48 mx-auto bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center">
            <div className="text-center">
              <Icon name="Video" size={48} className="mx-auto mb-2 text-gray-400" />
              <p className="text-sm text-gray-500">
                {isNative ? '–ù–∞—Ç–∏–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞ –≥–æ—Ç–æ–≤–∞' : '–í–µ–±-–∫–∞–º–µ—Ä–∞'}
              </p>
            </div>
          </div>
        </div>

        <Button 
          onClick={handleRecordVideo}
          disabled={isRecording}
          size="lg"
          className="bg-red-600 hover:bg-red-700 text-white px-8 py-3"
        >
          {isRecording ? (
            <>
              <Icon name="Square" size={20} className="mr-2" />
              –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
            </>
          ) : (
            <>
              <Icon name="VideoIcon" size={20} className="mr-2" />
              {isNative ? '–ó–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ (HD)' : '–ó–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ'}
            </>
          )}
        </Button>

        {isNative && (
          <div className="text-xs text-gray-500 space-y-1">
            <p>‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç –∑–∞–ø–∏—Å–∏</p>
            <p>‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (HD/4K)</p>
            <p>‚Ä¢ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≥–∞–ª–µ—Ä–µ—é</p>
            <p>‚Ä¢ –§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default NativeVideoRecorder;