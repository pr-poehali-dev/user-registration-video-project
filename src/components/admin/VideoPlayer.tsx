import React, { useEffect, useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';

interface VideoPlayerProps {
  videoUrl: string;
  leadTitle: string;
  className?: string;
}

const VideoPlayer: React.FC<VideoPlayerProps> = ({ videoUrl, leadTitle, className = '' }) => {
  const [isSupported, setIsSupported] = useState(true);
  const [isLoading, setIsLoading] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const { toast } = useToast();

  // Detect mobile device and browser
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  const isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
  
  // iOS version detection for better WebM support checking
  const getIOSVersion = () => {
    if (!isIOS) return null;
    const match = navigator.userAgent.match(/OS (\d+)_(\d+)/i);
    return match ? [parseInt(match[1], 10), parseInt(match[2], 10)] : null;
  };
  
  const iosVersion = getIOSVersion();

  useEffect(() => {
    checkVideoSupport();
  }, [videoUrl]);

  const checkVideoSupport = async () => {
    if (!videoUrl) return;

    // For iOS, check version and WebM support
    if (isIOS) {
      const video = document.createElement('video');
      const canPlayWebM = video.canPlayType('video/webm') !== '';
      const canPlayWebMCodecs = video.canPlayType('video/webm; codecs="vp8"') !== '';
      
      // iOS 15+ has better WebM support, but still limited
      const hasWebMSupport = canPlayWebM && canPlayWebMCodecs;
      
      if (!hasWebMSupport || (iosVersion && iosVersion[0] < 15)) {
        setIsSupported(false);
        toast({
          title: 'üì± iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
          description: '–í–∏–¥–µ–æ –ª—É—á—à–µ —Å–∫–∞—á–∞—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø–ª–µ–µ—Ä–µ iOS.',
          variant: 'default'
        });
        return;
      }
    }
    
    // For Android Chrome - should work fine
    if (isMobile && isChrome) {
      setIsSupported(true);
      return;
    }
    
    // For desktop Safari
    if (isSafari && !isMobile) {
      const video = document.createElement('video');
      const canPlayWebM = video.canPlayType('video/webm') !== '';
      
      if (!canPlayWebM) {
        setIsSupported(false);
        toast({
          title: 'Safari –±—Ä–∞—É–∑–µ—Ä',
          description: 'WebM –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Safari. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.',
          variant: 'default'
        });
        return;
      }
    }

    setIsSupported(true);
  };

  const downloadVideo = async () => {
    try {
      setIsLoading(true);
      
      // Convert data URL to blob for proper download
      const response = await fetch(videoUrl);
      const blob = await response.blob();
      
      // Create blob URL and download
      const blobUrl = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = blobUrl;
      
      // Clean filename for download
      const cleanTitle = leadTitle.replace(/[^a-zA-Z0-9]/g, '_');
      link.download = `video_${cleanTitle}.webm`;
      
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Clean up blob URL
      URL.revokeObjectURL(blobUrl);
      
      toast({
        title: '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ',
        description: `–í–∏–¥–µ–æ "${leadTitle}" –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è`,
      });
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ',
        variant: 'destructive'
      });
    } finally {
      setIsLoading(false);
    }
  };

  // If video is not supported on this device, show download option
  if (!isSupported) {
    return (
      <div className={`border rounded-lg p-4 text-center bg-muted/30 ${className}`}>
        <Icon name="Smartphone" size={48} className="mx-auto mb-4 text-primary" />
        {isIOS && (
          <>
            <p className="text-sm font-medium mb-2">
              üì± –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞ iPhone/iPad
            </p>
            <p className="text-sm text-muted-foreground mb-4">
              –°–∫–∞—á–∞–π—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –ø–ª–µ–µ—Ä–µ iOS —Å –ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º.
            </p>
          </>
        )}
        {isSafari && !isIOS && (
          <>
            <p className="text-sm font-medium mb-2">
              üåê Safari –±—Ä–∞—É–∑–µ—Ä
            </p>
            <p className="text-sm text-muted-foreground mb-4">
              WebM —Ñ–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è. –°–∫–∞—á–∞–π—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ Chrome.
            </p>
          </>
        )}
        {!isIOS && !isSafari && (
          <p className="text-sm text-muted-foreground mb-4">
            –í–∏–¥–µ–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ
          </p>
        )}
        <Button onClick={downloadVideo} disabled={isLoading} size="sm" className="mb-2">
          {isLoading ? (
            <Icon name="Loader2" size={16} className="animate-spin mr-2" />
          ) : (
            <Icon name="Download" size={16} className="mr-2" />
          )}
          –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ (.webm)
        </Button>
        {isIOS && (
          <p className="text-xs text-muted-foreground mt-2">
            üí° –ü–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ "–§–∞–π–ª—ã" iOS
          </p>
        )}
      </div>
    );
  }

  return (
    <div className={className}>
      <video 
        ref={videoRef}
        src={videoUrl} 
        controls 
        playsInline // Important for iOS
        preload="metadata"
        className="w-full max-h-64 rounded-lg border"
        style={{ maxWidth: '100%', height: 'auto' }}
        onError={(e) => {
          console.error('Video playback error:', e);
          setIsSupported(false);
          
          let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–∏–¥–µ–æ.';
          if (isIOS) {
            errorMessage = 'iOS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ. –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.';
          } else if (isSafari) {
            errorMessage = 'Safari –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç WebM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –≤–∏–¥–µ–æ.';
          }
          
          toast({
            title: '–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è',
            description: errorMessage,
            variant: 'destructive'
          });
        }}
      >
        <source src={videoUrl} type="video/webm" />
        <p className="text-sm text-muted-foreground">
          –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ.
        </p>
      </video>
      
      {/* Additional download button for mobile users */}
      {isMobile && (
        <div className="mt-2 text-center">
          <Button onClick={downloadVideo} disabled={isLoading} size="sm" variant="outline">
            {isLoading ? (
              <Icon name="Loader2" size={14} className="animate-spin mr-2" />
            ) : (
              <Icon name="Download" size={14} className="mr-2" />
            )}
            {isIOS ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ "–§–∞–π–ª—ã"' : '–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ'}
          </Button>
        </div>
      )}
    </div>
  );
};

export default VideoPlayer;